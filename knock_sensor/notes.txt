Tools for Windows
=================

make
https://chocolatey.org/install

avrdude
https://tinusaur.com/guides/avr-gcc-toolchain/

avr-gcc
https://www.microchip.com/en-us/tools-resources/develop/microchip-studio/gcc-compilers

In makefile, need to flip slashes and change "rm -f" to "del"

Servo Control
=============
FS5113M
Arduino uses PWM frequency: 50Hz (20ms)
Pulse width: 500-2500Âµs (0-180deg)
Speed: 0.14sec/60 degree
Voltage: 4-8.4V (tested at 6V)
Torque: 14kg*cm

N = (1,8,64,256,1024)
f_clk = 8e6 Hz
f_PWM = f_clk / ( N x 510)
N = 1024  top = 0x4E  f_PWM = 50

Accelerometer
=============

I have a spare ADXL345 board.
It has I2C.

https://www.sparkfun.com/datasheets/Sensors/Accelerometer/ADXL345.pdf

With the SDO/ALT ADDRESS pin high, the 7-bit I2C address for the device is 0x1D, followed bythe R/W bit.
This translates to 0x3A for a write and 0x3B for a read.
An alternate I2C address of 0x53 (followed by the R/W bit) 
can be chosen by grounding the SDO/ALT ADDRESS pin (Pin 12).

Our uses 0x53 (confirmed).

The DEVID (address 0x00) register holds a fixed device ID code of 0xE5.
Success.
  Wire.beginTransmission(ACCEL_ADDR);
  Wire.write(byte(0x00));
  Wire.endTransmission();

  Wire.requestFrom(ACCEL_ADDR, 1);
  while(Wire.available()) {
      byte val = Wire.read();
      Serial.print("DEVICE ID: ");
      Serial.print(val, HEX);
      Serial.println("");
  }

Interrupts are enabled by setting the appropriate bit in the 
INT_ENABLE register (Address 0x2E)
and are mapped to either the INT1 or INT2 pin based on the contents of the 
INT_MAP register (Address 0x2F).
It is recommended that interrupt bits be configured with the interrupts disabled, 
preventing interrupts from being accidentally triggered during configuration.
This can be done by writing a value of 0x00 to the INT_ENABLE register.
Clearing interrupts is performed either by 
reading the data registers (Address 0x32 to Address 0x37) 
until the interrupt condition is no longer valid for the data-related interrupts 
or by reading the INT_SOURCE register (Address 0x30) for the remaining interrupts.

The SINGLE_TAP bit is set when a single acceleration event 
that is greater than the value in the 
THRESH_TAP register (Address 0x1D) 
occurs for less time than is specified in the 
DUR register (Address 0x21).

https://github.com/chiefenne/ATTINY85-Servo-Control/blob/master/main.c

The board I have for the ADXL345 is from OSEPP.
Their schematic shows that CS, SDA, and SCL are all connected to VCC via 4.7k resistors.
ADDR is connected to GND via a 4.7k resistor.
The schematic looks accurate to what's on the board.

ADDR pulled low is why the address is 0x53.
Translating to 0xA6 for write and 0xA7 for read.
There are options for 100kHz and 400kHz communication.

Confirmed connections via multimeter.
When powered with 5V, chip used 3.27V as VCC, including on SDA and SCL.
Not great.
How much power loss will I get just from these resistors?
3 * (5 - 3.2)^2 / 4700 = 2mW
That's not nothing. That's 6W per hour.
Ugh.

USI_TWI_Master_Initialise says that it enable pull-ups on SDA and SCL.
My readings don't show this at all.
I saw those as 0V on both, and only went up to 3.2V.
There's no ATtiny84 support here.
https://github.com/adafruit/TinyWireM/blob/master/USI_TWI_Master.h
There's a new version with 84 support.
Honestly, this was probably the issue.
Oh, that's actually not the original, this is:
https://github.com/puuu/USIWire/blob/master/src/USI_TWI_Master/USI_TWI_Master.h
Original has a GNU lesser license that the new one lacks, hmm.
Oh well, I copied the license, I think I'm okay.
I'm only going to copy the section I need defining ATtiny84 ports.

Also, looks like I should add a few definitions to my own code.
#define F_CPU = 8000000
#define TWI_FAST_MODE

Issue was the address.
I forgot to append the R/W bit.
I was using 0x52/0x52 instead of 0xA6/0xA7.

Interrupts
==========

PCMSK - Pin Change Mask Register
If PCINT11..0 is set, and PCIE0 bit in GIMSK is set, pin change interrupt is enabled on that pin.
If PCINT11..0 is cleared, the interrupt is disabled.

Let's use PCINT0 on PCMSK0.

GIFR - General Interrupt Flag Register
When a PCINT triggers an interrupt request, PCIF bevomes set.
If the I-bit of SREG and the PCIE0 bit in GIMSK are set, 
the MCU will just to the corresponding interrupt vector.
The flag is cleared when the interrupt routine is execulated.
Or you can clear it by writing a 1 to it.

GIMSK
This has INT0, PCIE1, and PCIE0.
